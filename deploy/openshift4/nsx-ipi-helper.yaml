# nsx-ipi-helper DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nsx-ipi-helper
  namespace: nsx-system-operator
  labels:
    tier: nsx-networking
    component: nsx-ipi-helper
    version: v1
spec:
  selector:
    matchLabels:
      tier: nsx-networking
      component: nsx-ipi-helper
      version: v1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        tier: nsx-networking
        component: nsx-ipi-helper
        version: v1
    spec:
      hostNetwork: true
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
        - key: node.kubernetes.io/not-ready
          effect: NoSchedule
        - key: node.kubernetes.io/unreachable
          effect: NoSchedule
      nodeSelector:
        node-role.kubernetes.io/master: ""
      initContainers:
        - name: nsx-ipi-helper
          image: nsx-ujo-docker-local.artifactory.eng.vmware.com/3.1.1.17415517/nsx-ncp-rhel:latest
          imagePullPolicy: IfNotPresent
          # override NCP image entrypoint
          command: ["/bin/bash", "-c", "echo Disabling the DNS in localhost; iptables -A INPUT -p udp --dport 53 -j DROP; iptables -S INPUT; while ! curl localhost:6443 ; do sleep 1 ; done; echo Enabling the DNS in localhost; iptables -D INPUT -p udp --dport 53 -j DROP; iptables -S INPUT; echo Done"]
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
      containers:
        - name: nsx-dummy
          image: nsx-ujo-docker-local.artifactory.eng.vmware.com/3.1.1.17415517/nsx-ncp-rhel:latest
          imagePullPolicy: IfNotPresent
          # override NCP image entrypoint
          command: ["/bin/bash", "-c", "while true; do sleep 5; done"]